{"version":3,"file":"index.js","sources":["../src/constants/findTemplate.js","../src/utils/cjs2esm.js","../src/utils/readFile.js","../src/index.js"],"sourcesContent":["import j from 'jscodeshift';\n\n// 不区分引入语法，减少循环优化性能\nexport const findRequire = {\n    declarations: [\n        {\n            init: {\n                callee: {\n                    name: 'require',\n                },\n            },\n        },\n    ],\n};\n\n// 不区分导出语法，减少循环优化性能\nexport const findExports = {\n    expression: {\n        operator: '=',\n        left: {\n            type: j.MemberExpression,\n            object: {\n                type: j.Identifier,\n                name: 'module',\n            },\n            property: {\n                type: j.Identifier,\n                name: 'exports',\n            },\n        },\n    },\n};\n","import j from 'jscodeshift';\nimport babel from '@babel/core';\nconst { template } = babel;\nimport { findRequire, findExports } from '../constants/findTemplate.js';\n\n// 引入变量\nexport function require2Import (code) {\n    const ast = j(code);\n\n    ast.find(j.VariableDeclaration, findRequire).forEach(path => {\n        const { id, init } = path.value.declarations[0];\n        const importPath = init.arguments[0].value;\n        let replaceDeclaration; // 用于替换的表达式\n\n        if (path.parent.value.type === 'Program') {\n            // 根节点引入，转为 import\n\n            if (id.type === j.Identifier) {\n                // const a = require('a')\n                const varName = id.name;\n\n                replaceDeclaration = j.importDeclaration(\n                    [ j.importSpecifier(j.identifier(varName), j.identifier(varName)) ],\n                    j.stringLiteral(importPath),\n                );\n            } else if (id.type === j.ObjectPattern) {\n                // const { b, c } = require('bc')\n                const varNames = id.properties.map(property => property.key.name).join(',');\n\n                const replaceDeclarationTemplate = template(`\n                import { %%varNames%% } from %%importPath%%\n                `);\n                replaceDeclaration = replaceDeclarationTemplate({\n                    varNames,\n                    importPath,\n                });\n            }\n        } else {\n            // 嵌套引入，转为 import()\n        }\n\n        // console.log('新创建的表达式：replaceDeclaratino', replaceDeclaration);\n        if (replaceDeclaration) {\n            j(path).replaceWith(replaceDeclaration);\n        }\n    });\n\n    return ast.toSource();\n}\n\n// 导出变量\nexport function exports2Export (code) {\n    let ast = j(code);\n\n    ast.find(j.ExpressionStatement, findExports).forEach(path => {\n        const { left, right } = path.value.expression;\n        let replaceDeclaration;\n\n        if (right.type === j.Identifier) {\n            // module.exports = a\n            const varName = right.name;\n\n            const replaceDeclarationTemplate = template(`\n            export { \n                %%varName%%,\n            } \n            `);\n            replaceDeclaration = replaceDeclarationTemplate({\n                varName,\n            });\n        } else if (right.type === j.ObjectExpression) {\n            // module.exports = { a, b }\n            const varNames = right.properties.map(property => property.key.name).join(', ');\n\n            const replaceDeclarationTemplate = template(`\n            export { \n                %%varNames%%,\n            }\n            `);\n            replaceDeclaration = replaceDeclarationTemplate({\n                varNames,\n            });\n        } else if (right.type === j.NewExpression) {\n            // module.exports = new Abc()\n            const calleeName = right.callee.name;\n            const varName = `${calleeName.charAt(0).toLocaleLowerCase()}${calleeName.slice(1)}`;\n            const argumentsStr = right.arguments.map(arg => arg.name).join(', ');\n\n            const replaceDeclarationTemplate = template(\n                `export const %%varName%% = new %%calleeName%%(%%argumentsStr%%)`,\n            );\n            replaceDeclaration = replaceDeclarationTemplate({\n                calleeName,\n                varName,\n                argumentsStr,\n            });\n        }\n\n        // console.log('新创建的表达式：replaceDeclaratino', replaceDeclaration);\n        if (replaceDeclaration) {\n            j(path).replaceWith(replaceDeclaration);\n        }\n    });\n\n    return ast.toSource();\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { require2Import, exports2Export } from './cjs2esm.js';\n\nexport function readFile (argvPath = `${process.cwd()}/src`) {\n    console.log('传入的参数path', argvPath);\n    fs.readdir(argvPath, (err, files) => {\n        if (err) {\n            throw err;\n        }\n        files.forEach(file => {\n            let fPath = path.join(argvPath, file);\n            // console.log('当前遍历的绝对路径', fPath);\n\n            fs.stat(fPath, (err, stat) => {\n                if (err) {\n                    throw err;\n                }\n                if (stat.isFile()) {\n                    if (/\\.(j|t)s$/.test(fPath)) {\n                        const code = fs.readFileSync(fPath, {\n                            encoding: 'utf8',\n                        });\n\n                        // console.log('当前遍历的文件内容', code);\n                        let result = require2Import(code);\n                        result = exports2Export(result);\n                        console.log('当前遍历的文件编译结果', result);\n\n                        fs.writeFile(fPath, result, 'utf8', err => {\n                            if (err) {\n                                console.log('写入错误 err：', err);\n                            }\n                        });\n                    }\n                } else {\n                    readFile(fPath);\n                }\n            });\n        });\n    });\n}\n","import { readFile } from './utils/readFile.js';\n\nconst argvs = process.argv.slice(2);\nconst argvPath = argvs[0]; // 参数一：路径\nreadFile(argvPath);\n"],"names":["findRequire","declarations","init","callee","name","findExports","expression","operator","left","type","j","MemberExpression","object","Identifier","property","template","babel","require2Import","code","ast","find","VariableDeclaration","forEach","path","value","id","importPath","arguments","replaceDeclaration","parent","varName","importDeclaration","importSpecifier","identifier","stringLiteral","ObjectPattern","varNames","properties","map","key","join","replaceDeclarationTemplate","replaceWith","toSource","exports2Export","ExpressionStatement","right","ObjectExpression","NewExpression","calleeName","charAt","toLocaleLowerCase","slice","argumentsStr","arg","readFile","argvPath","process","cwd","console","log","fs","readdir","err","files","file","fPath","stat","isFile","test","readFileSync","encoding","result","writeFile","argvs","argv"],"mappings":"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"}