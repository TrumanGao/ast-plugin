{"version":3,"file":"index.js","sources":["../src/constants/findTemplate.js","../src/utils/cjs2esm.js","../src/utils/readFile.js","../src/index.js"],"sourcesContent":["import j from 'jscodeshift';\n\n// 不区分引入语法，减少循环优化性能\nexport const findRequire = {\n    declarations: [\n        {\n            init: {\n                callee: {\n                    name: 'require',\n                },\n            },\n        },\n    ],\n};\n\n// 不区分导出语法，减少循环优化性能\nexport const findExports = {\n    expression: {\n        operator: '=',\n        left: {\n            type: j.MemberExpression.name,\n            object: {\n                type: j.Identifier.name,\n                name: 'module',\n            },\n            property: {\n                type: j.Identifier.name,\n                name: 'exports',\n            },\n        },\n    },\n};\n","import j from 'jscodeshift';\nimport babel from '@babel/core';\nconst { template } = babel;\nimport { findRequire, findExports } from '../constants/findTemplate.js';\n\n// 引入变量\nexport function require2Import (code) {\n    console.log('进入引入变量函数');\n    const ast = j(code, {\n        parser: require('recast/parsers/typescript'),\n    });\n    // console.log('引入变量 ast：', ast);\n\n    ast.find(j.VariableDeclaration, findRequire).forEach(path => {\n        const { id, init } = path.value.declarations[0];\n        const importPath = init.arguments[0].value;\n        let replaceDeclaration; // 用于替换的表达式\n        console.log('导入变量');\n\n        if (path.parent.value.type === 'Program') {\n            // 根节点引入，转为 import\n\n            if (id.type === j.Identifier.name) {\n                // const a = require('a')\n                console.log('导入单个', j.Identifier);\n                const varName = id.name;\n\n                const replaceDeclarationTemplate = template(`\n                import { %%varName%% } from %%importPath%%\n                `);\n                replaceDeclaration = replaceDeclarationTemplate({\n                    varName,\n                    importPath,\n                });\n            } else if (id.type === j.ObjectPattern.name) {\n                // const { b, c } = require('bc')\n                console.log('导入多个', j.ObjectPattern);\n                const varNames = id.properties.map(property => property.key.name).join(',');\n\n                const replaceDeclarationTemplate = template(`\n                import { %%varNames%% } from %%importPath%%\n                `);\n                replaceDeclaration = replaceDeclarationTemplate({\n                    varNames,\n                    importPath,\n                });\n            }\n        } else {\n            // 嵌套引入，转为 import()\n        }\n\n        if (replaceDeclaration) {\n            j(path).replaceWith(replaceDeclaration);\n        }\n    });\n\n    return ast.toSource();\n}\n\n// 导出变量\nexport function exports2Export (code) {\n    console.log('进入导出变量函数');\n    let ast = j(code, {\n        parser: require('recast/parsers/typescript'),\n    });\n    // console.log('导出变量 ast：', ast);\n\n    ast.find(j.ExpressionStatement, findExports).forEach(path => {\n        const { left, right } = path.value.expression;\n        let replaceDeclaration;\n        console.log('导出变量');\n\n        if (right.type === j.Identifier.name) {\n            // module.exports = a\n            console.log('导出单个', j.Identifier);\n            const varName = right.name;\n\n            const replaceDeclarationTemplate = template(`\n            export { \n                %%varName%%,\n            } \n            `);\n            replaceDeclaration = replaceDeclarationTemplate({\n                varName,\n            });\n        } else if (right.type === j.ObjectExpression.name) {\n            // module.exports = { a, b }\n            console.log('导出多个', j.ObjectExpression);\n            const varNames = right.properties.map(property => property.key.name).join(', ');\n\n            const replaceDeclarationTemplate = template(`\n            export {\n                %%varNames%%,\n            }\n            `);\n            replaceDeclaration = replaceDeclarationTemplate({\n                varNames,\n            });\n        } else if (right.type === j.NewExpression.name) {\n            // module.exports = new Abc()\n            console.log('导出类的实例化', j.NewExpression);\n            const calleeName = right.callee.name;\n            const varName = `${calleeName.charAt(0).toLocaleLowerCase()}${calleeName.slice(1)}`;\n            const argumentsStr = right.arguments.map(arg => arg.name).join(', ');\n\n            const replaceDeclarationTemplate = template(\n                `export const %%varName%% = new %%calleeName%%(%%argumentsStr%%)`,\n            );\n            replaceDeclaration = replaceDeclarationTemplate({\n                calleeName,\n                varName,\n                argumentsStr,\n            });\n        }\n\n        if (replaceDeclaration) {\n            j(path).replaceWith(replaceDeclaration);\n        }\n    });\n\n    return ast.toSource();\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { require2Import, exports2Export } from './cjs2esm.js';\n\nexport function readFile (argvPath = `${process.cwd()}\\\\src`) {\n    fs.readdir(argvPath, (err, files) => {\n        if (err) {\n            throw err;\n        }\n        files.forEach(file => {\n            let fPath = path.join(argvPath, file);\n\n            fs.stat(fPath, (err, stat) => {\n                if (err) {\n                    throw err;\n                }\n                if (stat.isFile()) {\n                    console.log('访问文件：', fPath);\n                    if (/\\.(j|t)s$/.test(fPath)) {\n                        const code = fs.readFileSync(fPath, {\n                            encoding: 'utf8',\n                        });\n\n                        // console.log('当前遍历的文件内容', code);\n                        const result = [ require2Import, exports2Export ].reduce((code, currentFn) => {\n                            return currentFn(code);\n                        }, code);\n                        // console.log('当前遍历的文件编译结果', result);\n\n                        fs.writeFile(fPath, result, 'utf8', err => {\n                            if (err) {\n                                console.log('写入错误 err：', err);\n                            }\n                        });\n                    } else {\n                        console.log('访问文件 - 文件未通过校验', fPath);\n                    }\n                } else {\n                    console.log('访问文件夹：', fPath);\n                    readFile(fPath);\n                }\n            });\n        });\n    });\n}\n","import { readFile } from './utils/readFile.js';\n\nconst argvs = process.argv.slice(2);\nconst argvPath = argvs[0]; // 参数一：路径\nreadFile(argvPath);\n"],"names":["findRequire","declarations","init","callee","name","findExports","expression","operator","left","type","j","MemberExpression","object","Identifier","property","template","babel","require2Import","code","console","log","ast","parser","require","find","VariableDeclaration","forEach","path","value","id","importPath","arguments","replaceDeclaration","parent","varName","replaceDeclarationTemplate","ObjectPattern","varNames","properties","map","key","join","replaceWith","toSource","exports2Export","ExpressionStatement","right","ObjectExpression","NewExpression","calleeName","charAt","toLocaleLowerCase","slice","argumentsStr","arg","readFile","argvPath","process","cwd","fs","readdir","err","files","file","fPath","stat","isFile","test","readFileSync","encoding","result","reduce","currentFn","writeFile","argvs","argv"],"mappings":"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"}